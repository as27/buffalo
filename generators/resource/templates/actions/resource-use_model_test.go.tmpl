{{ $ := . -}}
package actions_test

import (
	"testing"

	"github.com/stretchr/testify/require"
)
// This file is generated by Buffalo. It offers basic tests for the
// generated structure. If you change something inside your model or
// your resource you should change this testfile that your logic is 
// tested correctly.

// This file is not complete it just offers basic tests for the
// basic generated {{.model}} resource.

// While generation following props where added to the tests:
{{ range $p := .modelProps -}}
// ---> {{ $p.Name }}
{{ end -}}
// ------------------------------------------------------------------


// This test checks {{.camel}}Resource.List() which lists all 
// {{.modelPlural}}
func (as *ActionSuite) Test_{{.modelPlural}}Resource_List() {
	// {{.varPlural}} defines a list of {{.model}}. The generator
	// created just two basic values. After generation you should
	// edit this test cases that is represents your model
	{{.varPlural}} := models.{{.modelPlural}}{
		{{"{"}}
	{{ range $p := .modelProps -}}
			{{ $p.Name }}: "A string for {{ $p.Name }}",
	{{ end -}}
		},
		{{"{"}}
	{{ range $p := .modelProps -}}
			{{ $p.Name }}: "Another string for {{ $p.Name }}",
	{{ end -}}
		},
	}
	// Create a entry for each list value
	for _, t := range {{.varPlural}} {
		err := as.DB.Create(&t)
		as.NoError(err)
	}
	// request the page for the list of {{.model}}
	res := as.HTML("/{{.under}}").Get()
	body := res.Body.String()
	// Check if the value of each list is inside the requested 
	// page.
	for _, t := range {{.varPlural}} {
		{{ range $p := .modelProps -}}
			as.Contains(body, fmt.Sprintf("%s", t.{{ $p.Name }}))
		{{ end -}}
	}
}

// This test checks the new page for {{.model}}. 
func (as *ActionSuite) Test_{{.modelPlural}}Resource_New() {
	// Request the page
	res := as.HTML("/{{.under}}/new").Get()
	// Check for correct header
	as.Contains(res.Body.String(), "<h1>New {{.model}}</h1>")
}

// This test checks {{.camel}}Resource.Create(), which adds a
// {{.singular}} to the DB.
func (as *ActionSuite) Test_{{.modelPlural}}Resource_Create() {
	// {{.varSingular}} defines just some basic values
	// You should change that basic values that they represent 
	// your model.
    {{.varSingular}} := &models.{{.model}}{
		{{ range $p := .modelProps -}}
		{{$p.Name}}: "A value for {{$p.Name}}",
		{{ end -}}
	}
	res := as.HTML("/{{.under}}").Post({{.varSingular}})
	// Check the return code of the model
	as.Equal(302, res.Code)
	// Check the redirected URL
	as.Contains(res.Location(),"/{{.under}}")

	// Load the created values
	err := as.DB.First({{.varSingular}})
	as.NoError(err)
	// Check the loaded {{.varSingular}}
	as.NotZero({{.varSingular}}.ID)
	as.NotZero({{.varSingular}}.CreatedAt)
	{{ range $p := .modelProps -}}
	as.Equal("A value for {{$p.Name}}", {{$.varSingular}}.{{$p.Name}})
	{{ end -}}
}

// This test checks {{.camel}}Resource.Create(), for a case
// when an error should occur. 
func (as *ActionSuite) Test_{{.modelPlural}}Resource_Create_Errors() {
	// Create an empty {{.model}}
    {{.varSingular}} := &models.{{.model}}{}
	// Try to create an entry 
	res := as.HTML("/{{.under}}").Post({{.varSingular}})
	// Check the return code 
	as.Equal(422, res.Code)
	// Check the error message. You need to edit this tests if your
	// validation changes or if some properties are allowed to left
	// blank.
	{{ range $p := .modelProps -}}
	as.Contains(res.Body.String(), "{{$p.Name}} can not be blank.")
	{{ end -}}

	c, err := as.DB.Count({{.varSingular}})
	as.NoError(err)
	// Check if there is nothing created
	as.Equal(0, c)
}

// This test checks {{.camel}}Resource.Show()
func (as *ActionSuite) Test_{{.modelPlural}}Resource_Show() {
	// {{.varSingular}} defines just some basic values
	// You should change that basic values that they represent 
	// your model.
    {{.varSingular}} := &models.{{.model}}{
		{{ range $p := .modelProps -}}
		{{$p.Name}}: "A value for {{$p.Name}}",
		{{ end -}}
	}
	// Create an entry 
	verrs, err := as.DB.ValidateAndCreate({{.varSingular}})
	as.NoError(err)
	as.False(verrs.HasAny())

	// Get the user over the Buffalo app
	res := as.HTML("/{{.under}}/%s", {{.varSingular}}.ID).Get()
	body := res.Body.String()
	// Check if the properties are inside the page
	{{ range $p := .modelProps -}}
	as.Contains(body, "A value for {{$p.Name}}")
	{{ end -}}
}

// This test checks {{.camel}}Resource.Update()
func (as *ActionSuite) Test_{{.modelPlural}}Resource_Update() {
	// {{.varSingular}} defines first an initial value
	// for each property.
	// Please change that values that they represent your model.
    {{.varSingular}} := &models.{{.model}}{
		{{ range $p := .modelProps -}}
		{{$p.Name}}: "Initial value for {{$p.Name}}",
		{{ end -}}
	}
	// Create the initial entry
	verrs, err := as.DB.ValidateAndCreate({{.varSingular}})
	as.NoError(err)
	as.False(verrs.HasAny())
	// Now change the value of each property to another value
	res := as.HTML("/{{.under}}/%s", {{.varSingular}}.ID).Put(&models.{{.model}}{
		ID: {{.varSingular}}.ID,
		{{ range $p := .modelProps -}}
		{{$p.Name}}: "Changed value for {{$p.Name}}",
		{{ end -}}
	})
	// Check the return code
	as.Equal(302, res.Code)

	// Get the updated values from the DB
	err = as.DB.Reload({{.varSingular}})
	as.NoError(err)
	// Check if the changed values are updated correctly
	{{ range $p := .modelProps -}}
	as.Equal("Changed value for {{$p.Name}}", {{$.varSingular}}.{{$p.Name}})
	{{ end -}}
}

